{
  "version": 3,
  "sources": ["../../../../node_modules/johnny-five/lib/board.options.js", "../../../../node_modules/johnny-five/lib/board.pins.js"],
  "sourcesContent": ["/**\n * Many pins have common aliases, especially SPI!\n */\n\nconst MISO = \"miso\";\nconst MOSI = \"mosi\";\nconst SCLK = \"sclk\";\nconst SS = \"ss\";\n\n// jshint unused:false\nconst aliases = {\n\n  // SCLK\n  clk: SCLK,\n  clock: SCLK,\n  sclk: SCLK,\n\n  // MISO\n  somi: MISO,\n  sdo: MISO,\n  do: MISO,\n  dout: MISO,\n  so: MISO,\n  mrsr: MISO,\n  miso: MISO,\n\n  // MOSI\n  simo: MOSI,\n  sdi: MOSI,\n  data: MOSI,\n  di: MOSI,\n  din: MOSI,\n  si: MOSI,\n  mtst: MOSI,\n  mosi: MOSI,\n\n  // SS\n  ncs: SS,\n  cs: SS,\n  csb: SS,\n  csn: SS,\n  en: SS,\n  ld: SS,\n  load: SS,\n  nss: SS,\n  ste: SS,\n  sync: SS,\n  ss: SS,\n};\n\n\n/**\n * Options\n *\n * @param {String} arg Pin address.\n * @param {Number} arg Pin address.\n * @param {Array} arg List of Pin addresses.\n *\n * @return {Options} normalized board options instance.\n */\n\nclass Options {\n  constructor(arg) {\n    var options = {};\n\n    if (typeof arg === \"number\" ||\n      typeof arg === \"string\") {\n      options.pin = arg;\n    } else if (Array.isArray(arg)) {\n      options.pins = arg;\n    } else {\n      options = arg;\n\n      // @Nick, this is where you want to focus.\n      // Anytime this path is taken, the constructor\n      // received an object. If the object contains\n      // a \"pins\" property that is ALSO an object, we need\n      // to normalize the keys of that object, using the\n      // \"aliases\" map defined above.\n      //\n      // This change will require renaming pin properties in\n      // a few classes, but I'm ok with that, because if we do this\n      // right, no existing code will break.\n      //\n    }\n\n    Object.assign(this, options);\n  }\n}\nmodule.exports = Options;\n", "const Options = require(\"./board.options\");\n\nconst MODES = {\n  INPUT: 0x00,\n  OUTPUT: 0x01,\n  ANALOG: 0x02,\n  PWM: 0x03,\n  SERVO: 0x04\n};\n\n\n/**\n * Pin Capability Signature Mapping\n */\n\nconst pinsToType = {\n  20: \"UNO\",\n  25: \"LEONARDO\",\n  70: \"MEGA\"\n};\n\nfunction Pins(board) {\n  if (!(this instanceof Pins)) {\n    return new Pins(board);\n  }\n\n  const io = board.io;\n  const pins = io.pins.slice();\n  const length = pins.length;\n  const type = pinsToType[length] || \"OTHER\";\n\n  board.type = type;\n\n  // Copy pin data to index\n  for (let i = 0; i < length; i++) {\n    this[i] = pins[i];\n  }\n\n  Object.defineProperties(this, {\n    type: {\n      value: type\n    },\n    length: {\n      value: length\n    }\n  });\n\n  // If an IO Plugin or Expander defines\n  // these, override the default\n  [\n    \"isInput\",\n    \"isOutput\",\n    \"isAnalog\",\n    \"isPwm\",\n    \"isServo\",\n  ].forEach(isType => {\n    if (io[isType]) {\n      this[isType] = io[isType];\n    }\n  });\n}\n\nObject.entries(MODES).forEach(([mode, value]) => {\n  Object.defineProperty(Pins, mode, { value });\n});\n\nfunction isFirmata({io}) {\n  return io.name === \"Firmata\" || io.name === \"Mock\";\n}\n\nfunction hasPins({pin, pins}) {\n  return typeof pin !== \"undefined\" ||\n    (typeof pins !== \"undefined\" && pins.length);\n}\n\nPins.isFirmata = isFirmata;\n\nPins.Error = ({pin, type, via}) => {\n  throw new Error(\n    `Pin Error: ${pin} is not a valid ${type} pin (${via})`\n  );\n};\n\nconst normalizers = new Map();\n\nPins.normalize = function(options, board) {\n  var type = board.pins.type;\n  var isArduino = isFirmata(board);\n  var normalizer = normalizers.get(board);\n  var isNormalizing;\n\n  if (typeof options === \"string\" ||\n    typeof options === \"number\" ||\n    Array.isArray(options)) {\n\n    options = new Options(options);\n  }\n\n  if (!normalizer) {\n    isNormalizing = board.io && typeof board.io.normalize === \"function\";\n\n    normalizer = function(pin) {\n      return isArduino ?\n        Pins.fromAnalog(Pins.translate(pin, type)) :\n        (isNormalizing ? board.io.normalize(pin) : pin);\n    };\n\n    normalizers.set(board, normalizer);\n  }\n\n  // Auto-normalize pin values, this reduces boilerplate code\n  // inside module constructors\n  if (hasPins(options)) {\n\n    // When an array of pins is present, attempt to\n    // normalize them if necessary\n    if (options.pins) {\n      options.pins = options.pins.map(normalizer);\n    } else {\n      options.pin = normalizer(options.pin);\n    }\n  }\n\n  return options;\n};\n\nPins.normalize.clear = function() {\n  normalizers.clear();\n};\n\n// Special kit-centric pin translations\nPins.translations = {\n  UNO: {\n    dtoa: {\n      14: \"A0\",\n      15: \"A1\",\n      16: \"A2\",\n      17: \"A3\",\n      18: \"A4\",\n      19: \"A5\"\n    },\n\n    // TinkerKit\n    tinker: {\n      I0: \"A0\",\n      I1: \"A1\",\n      I2: \"A2\",\n      I3: \"A3\",\n      I4: \"A4\",\n      I5: \"A5\",\n\n      O0: 11,\n      O1: 10,\n      O2: 9,\n      O3: 6,\n      O4: 5,\n      O5: 3,\n\n      D13: 13,\n      D12: 12,\n      D8: 8,\n      D7: 7,\n      D4: 4,\n      D2: 2\n    }\n  },\n  MEGA: {\n    dtoa: {\n      54: \"A0\",\n      55: \"A1\",\n      56: \"A2\",\n      57: \"A3\",\n      58: \"A4\",\n      59: \"A5\",\n      60: \"A6\",\n      61: \"A7\",\n      62: \"A8\",\n      63: \"A9\"\n    },\n\n    // TinkerKit\n    tinker: {\n      I0: \"A0\",\n      I1: \"A1\",\n      I2: \"A2\",\n      I3: \"A3\",\n      I4: \"A4\",\n      I5: \"A5\",\n      I6: \"A6\",\n      I7: \"A7\",\n      I8: \"A8\",\n      I9: \"A9\",\n\n      O0: 11,\n      O1: 10,\n      O2: 9,\n      O3: 6,\n      O4: 5,\n      O5: 3,\n\n      D13: 13,\n      D12: 12,\n      D8: 8,\n      D7: 7,\n      D4: 4,\n      D2: 2\n    }\n  }\n};\n\nPins.translations.LEONARDO = Pins.translations.UNO;\n\nPins.translate = function(pin, type) {\n  var translations = Pins.translations[type.toUpperCase()];\n\n  if (!translations) {\n    return pin;\n  }\n\n  return Object.keys(translations).reduce(function(pin, map) {\n    return translations[map][pin] || pin;\n  }, pin);\n};\n\nPins.fromAnalog = function(pin) {\n  if (typeof pin === \"string\" && (pin.length > 1 && pin[0] === \"A\")) {\n    return parseInt(pin.slice(1), 10);\n  }\n  return pin;\n};\n\nPins.identity = function(pins, needle) {\n  return [].findIndex.call(pins, function(pin) {\n    return pin.name === needle || pin.id === needle || pin.port === needle;\n  });\n};\n\n/**\n * (generated methods)\n *\n * Pins.prototype.isInput\n * Pins.prototype.isOutput\n * Pins.prototype.isAnalog\n * Pins.prototype.isPwm\n * Pins.prototype.isServo\n *\n */\nObject.keys(MODES).forEach(function(key) {\n  var name = key[0] + key.slice(1).toLowerCase();\n\n  Pins.prototype[\"is\" + name] = function(pin) {\n    var attrs = this[pin] || this[Pins.identity(this, pin)];\n\n    if (attrs && attrs.supportedModes.includes(MODES[key])) {\n      return true;\n    }\n    return false;\n  };\n});\n\nPins.prototype.isDigital = function(pin) {\n  var attrs = this[pin] || this[Pins.identity(this, pin)];\n\n  if (attrs && attrs.supportedModes.length) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = Pins;\n"],
  "mappings": "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",
  "names": ["pin"]
}
